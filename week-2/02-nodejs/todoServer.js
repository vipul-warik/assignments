/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const port = 8080;
  const {readFromFile,appendToFile,updateFromFile,delteFromFile,getTodoFromFile} = require('./utils/fileReadWrite');
  
  const app = express();

  app.listen(port, () => {
    console.log(`Todo app listening on port ${port}`)
  })
  
  app.use(bodyParser.json());

  // *** HOME PAGE ***
  app.get('/', (req, res) => {
    res.send('Welcome to Todo Server');
  })


  // *** GET ALL TODOS (LIST) ***
  app.get('/todos', async (req,res) => {

    try {
      const todosData = await readFromFile();

      return res.status(200).json(todosData);

    } catch (error) {
      return res.status(500).json({
        "message": "Interval server error",
      });
    }

  })

  
  // *** GET TODO BY ID ***
  app.get('/todos/:id', async (req, res) => {
    try {
      const todoId = req.params.id;

      console.log(todoId);

      const todoData = await getTodoFromFile(todoId);

      if(todoData.length == 0){

        return res.status(404).json({
              "message": "Todo Id does not exists",
            })}

      return res.status(200).json(todoData[0]);      


    } catch (error) {
      return res.status(500).json({
        "message": "Interval server error",
      });
    }
      

  });


  // *** ADD A NEW TODO ***
  app.post('/todos', async (req, res) => {
    
    try {
      const {title, description} = req.body;

      if(!title || !description){
        return res.status(400).json({
          message: "Invalid title or description",
        })
      }

      const todoId = await appendToFile({"title": title, "description": description, "completed": false });

      return res.status(201).json({
        "id" : todoId,
      })

    } catch (error) {
      return res.status(500).json({
        "message": "Interval server error",
      });
    }

  });


  // *** UPDATE A TODO BY ID ***
  app.put('/todos/:id', async (req, res) => {
    try {

      const todoId = req.params.id;
      const {title: newTitle, description: newDescription, completed: newStatus} = req.body;

      
      if(!newTitle || !newDescription) {
        return res.status(400).json({
          message: "Invalid title,description or completed status",
        })
      }

      const todoData = await getTodoFromFile(todoId);

      if(todoData.length == 0){

        return res.status(404).json({
              "message": "Todo Id does not exists",
            })}

      todoData[0].title = newTitle;
      todoData[0].description = newDescription;
      newStatus == "true" ? todoData[0].completed = true : todoData[0].completed = false;

      const data = await readFromFile();
      console.log(data);
      const updatedData = data.map((todo) => todo.id==todoId ? {...todoData[0]} : todo);
      console.log(updatedData);

      await updateFromFile(updatedData);

      return res.status(200).json({
        "message": "updated"
      })

    } catch (error) {
      return res.status(500).json({
        "message": "Interval server error",
      });
    }
  });

  // *** DELETE A TODO BY ID ***
  app.delete('/todos/:id', async (req, res) => {
    try {
      const todoId = req.params.id;

      await delteFromFile(todoId);

      return res.status(200).json({
        message: "Todo deleted"
      });

    } catch (error) {
      return res.status(500).json({
        "message": "Interval server error",
      });
    }
          
  });
  
  module.exports = app;